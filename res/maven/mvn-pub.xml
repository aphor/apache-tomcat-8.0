<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project name="Tomcat 7.0 Maven Deployment" default="" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <!--
    Built for using Maven Ant Tasks 2.0.10 - download to this directory
    You'll also need to install jsch 0.1.42 and manually configure
    wagon-ssh 1.0-beta-2 to use the updated jsch. This will also add a
    requirement for jzlib 1.0.7
  -->
  <!--
  Properties required to be set:
  maven.repo.url - the URL of the repository, for example scp://people.apache.org/www/people.apache.org/repo/m2-snapshot-repository
  maven.repo.repositoryId - the id of the repository, for example apache.snapshots
  maven.deploy.version - the version that the components will be deployed as, for example @MAVEN.DEPLOY.VERSION@
  tomcat.lib.path - the path to tomcat JAR files
  tomcat.bin.path - the path to tomcat's bin directory (for other JAR files)
  tomcat.pom.path - the path to the POM files
  
  For passwordless upload you'll also need to set
  maven.scp.username    - Your ASF ID
  maven.scp.privateKey  - Path to your exported ssh key
  
  All these can be defined by mvn.properties (and defaults are in mvn.properties.default)
  
  To get a private key to work on Windows, I followed these steps
  1. on a linux box execute 'ssh-keygen -t rsa'
  2. same linux box execute 'cat id_rsa.pub >> authorized_keys' and 'cat id_rsa.pub >> authorized_keys2'
  3. Copy id_rsa and id_rsa.pub to my windows box
  4. Import id_rsa into puttygen
  5. export id_rsa from puttygen to OpenSSH key
  6. The key you exported from puttygen is the one you reference from the <privateKey> element
  7. Manually create the %USERPROFILE%\.ssh directory
  8. Manually add the %USERPROFILE%\.ssh\known_hosts file with the entry for the host
  -->
  <property file="${basedir}/mvn.properties"/>
  <property file="${basedir}/mvn.properties.default"/>
  <property name="local.repo" value="${user.home}/.m2/repository"/>
  
  <target name="init-maven">
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
      <classpath>
        <pathelement location="${basedir}/maven-ant-tasks-2.0.10.jar" />
      </classpath>
    </typedef>
    <artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
  </target>

  <target name="maven-deploy" depends="init-maven">
    <!--cleanup-->
    <delete file="${pom}.tmp"/>
    <delete file="${file}.asc"/>
    <delete file="${src}.asc"/>

    <!--replace the version in the pom-->
    <copy file="${pom}" tofile="${pom}.tmp">
      <filterset>
        <filter token="MAVEN.DEPLOY.VERSION" value="${maven.deploy.version}"/>
      </filterset>
    </copy>
    
    <!--sign the jar-->
    <exec executable="${maven.gpg.exec}" failonerror="true" inputstring="${maven.gpg.passphrase}">
      <arg value="--passphrase-fd"/>
      <arg value="0"/>
      <arg value="-a"/>
      <arg value="-b"/>
      <arg value="${file}"/>
    </exec>
    <exec executable="${maven.gpg.exec}" failonerror="true" inputstring="${maven.gpg.passphrase}">
      <arg value="--passphrase-fd"/>
      <arg value="0"/>
      <arg value="-a"/>
      <arg value="-b"/>
      <arg value="${src}"/>
    </exec>
    
    <!--deploy it-->
    <artifact:deploy file="${file}">
        <pom file="${pom}.tmp"/>
        <remoteRepository url="${maven.repo.url}" layout="default">
          <authentication username="${maven.scp.username}" privateKey="${maven.scp.privateKey}" passphrase="${maven.scp.passphrase}"/>
        </remoteRepository>
        <attach file="${file}.asc" type="jar.asc"/>
        <attach file="${src}" classifier="sources" type="jar"/>
        <attach file="${src}.asc" type="jar.asc"/>
    </artifact:deploy>

    <delete file="${pom}.tmp"/>
    <delete file="${file}.asc"/>
    <delete file="${src}.asc"/>
  </target>

  <macrodef name="doMavenDeploy">
    <attribute name="artifactId"/>
    <attribute name="jarFileName" default="@{artifactId}.jar" />
    <attribute name="groupId" default="org.apache.tomcat" />
    <attribute name="file" default="${tomcat.lib.path}/@{jarFileName}" />
    <attribute name="pom" default="@{artifactId}.pom" />
    <attribute name="src" default="${basedir}/TODO-currently-empty-src.jar" />
    <sequential>
      <antcall target="maven-deploy">
        <param name="file" value="@{file}"/>
        <param name="groupId" value="@{groupId}"/>
        <param name="artifactId" value="@{artifactId}"/>
        <param name="pom" value="${tomcat.pom.path}/@{pom}"/>
        <param name="src" value="@{src}"/>
      </antcall>
    </sequential>
  </macrodef>
  
  <target name="generic-deploy" depends="init-maven">
  	<!-- Standard jars in bin directory -->
  	<!-- Skip bootstrap.jar - it is just a subset of catalina.jar -->
  	<doMavenDeploy artifactId="tomcat-juli" file="${tomcat.bin.path}/tomcat-juli.jar"/>
    <!-- TODO source JAR -->
  	
  	<!-- Standard jars in lib directory -->
  	<doMavenDeploy artifactId="tomcat-annotations-api" jarFileName="annotations-api.jar"/>
  	<doMavenDeploy artifactId="tomcat-catalina" jarFileName="catalina.jar"/>
    <doMavenDeploy artifactId="tomcat-catalina-ant" jarFileName="catalina-ant.jar"/>
    <doMavenDeploy artifactId="tomcat-catalina-ha" jarFileName="catalina-ha.jar"/>
    <doMavenDeploy artifactId="tomcat-tribes" jarFileName="catalina-tribes.jar"/>
    <doMavenDeploy artifactId="tomcat-el-api" jarFileName="el-api.jar"/>
    <doMavenDeploy artifactId="tomcat-jasper" jarFileName="jasper.jar"/>
    <doMavenDeploy artifactId="tomcat-jasper-el" jarFileName="jasper-el.jar"/>
    <doMavenDeploy artifactId="tomcat-jasper-jdt" jarFileName="jasper-jdt.jar"/>
    <doMavenDeploy artifactId="tomcat-jsp-api" jarFileName="jsp-api.jar"/>
    <doMavenDeploy artifactId="tomcat-servlet-api" jarFileName="servlet-api.jar"/>
    <doMavenDeploy artifactId="tomcat-api"/>
    <doMavenDeploy artifactId="tomcat-coyote"/>
    <doMavenDeploy artifactId="tomcat-dbcp"/>
    <doMavenDeploy artifactId="tomcat-i18n-es"/>
    <doMavenDeploy artifactId="tomcat-i18n-fr"/>
    <doMavenDeploy artifactId="tomcat-i18n-ja"/>
    <!-- TODO source JARs -->

    <!-- Extras jars -->
    <doMavenDeploy artifactId="tomcat-extras-juli"
        groupId="org.apache.tomcat.extras"
    	file="${tomcat.extras.path}/tomcat-juli.jar" />
    <doMavenDeploy artifactId="tomcat-extras-juli-adapters"
    	groupId="org.apache.tomcat.extras"
        file="${tomcat.extras.path}/tomcat-juli-adapters.jar" />
    <doMavenDeploy artifactId="tomcat-catalina-jmx-remote"
    	groupId="org.apache.tomcat.extras"
        file="${tomcat.extras.path}/catalina-jmx-remote.jar" />
    <doMavenDeploy artifactId="tomcat-catalina-ws"
    	groupId="org.apache.tomcat.extras"
        file="${tomcat.extras.path}/catalina-ws.jar" />
    <!-- TODO source JARs -->

  	<!-- Emedded jars -->
  	<!-- Skip DBCP & Jasper-JDT - optional and can use standard ones above -->
    <doMavenDeploy artifactId="tomcat-embed-core"
        groupId="org.apache.tomcat.embed"
        file="${tomcat.embed.path}/tomcat-embed-core.jar"
    	pom="tomcat-embed-core.pom"
        src="${tomcat.embed.path}/tomcat-embed-core-src.jar"/>
    <doMavenDeploy artifactId="tomcat-embed-jasper"
        groupId="org.apache.tomcat.embed"
        file="${tomcat.embed.path}/tomcat-embed-jasper.jar"
    	pom="tomcat-embed-jasper.pom"
        src="${tomcat.embed.path}/tomcat-embed-jasper-src.jar"/>
    <doMavenDeploy artifactId="tomcat-embed-logging-juli"
        groupId="org.apache.tomcat.embed"
        file="${tomcat.embed.path}/tomcat-embed-logging-juli.jar"
        pom="tomcat-embed-logging-juli.pom"
        src="${tomcat.embed.path}/tomcat-embed-logging-juli-src.jar"/>
    <doMavenDeploy artifactId="tomcat-embed-logging-log4j"
        groupId="org.apache.tomcat.embed"
        file="${tomcat.embed.path}/tomcat-embed-logging-log4j.jar"
        pom="tomcat-embed-logging-log4j.pom" />
    <!-- TODO source JAR -->
  	
  </target>

  <target name="deploy-snapshot">
    <antcall target="generic-deploy">
      <param name="maven.repo.repositoryId" value="${maven.snapshot.repo.repositoryId}"/>
      <param name="maven.repo.url" value="${maven.snapshot.repo.url}"/>
      <param name="maven.deploy.version" value="${maven.snapshot.deploy.version}"/>
    </antcall>
  </target>

  <target name="deploy-staging">
    <antcall target="generic-deploy">
      <param name="maven.repo.repositoryId" value="${maven.release.repo.repositoryId}"/>
      <param name="maven.repo.url" value="${maven.release.repo.url}"/>
      <param name="maven.deploy.version" value="${maven.release.deploy.version}"/>
    </antcall>
  </target>

  <target name="deploy-release">
    <antcall target="generic-deploy">
      <param name="maven.repo.repositoryId" value="${maven.asf.release.repo.repositoryId}"/>
      <param name="maven.repo.url" value="${maven.asf.release.repo.url}"/>
      <param name="maven.deploy.version" value="${maven.asf.release.deploy.version}"/>
    </antcall>
  </target>
  
  <target name="help">
    <echo>Help is on the way!</echo>
  </target>

</project>
