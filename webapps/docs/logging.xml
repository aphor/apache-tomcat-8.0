<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="logging.html">

    &project;

  <properties>
    <title>Logging in Tomcat</title>
    <author>Allistair Crossley</author>
    <author email="yoavs@apache.org">Yoav Shapira</author>
  </properties>

<body>

<section name="Table of Contents">
<toc/>
</section>

  <section name="Introduction">
    <p>
      Tomcat uses 
      <a href="http://commons.apache.org/logging">Commons Logging</a>
      throughout its internal code allowing the 
      developer to choose a logging configuration that suits their needs, e.g
      java.util.logging or 
      <a href="http://logging.apache.org/log4j">Log4J</a>. 
      Commons Logging provides Tomcat with the ability to log
      hierarchically across various log levels without needing to rely on a
     particular logging implementation.
    </p>

    <p>
      By default, only java.util.logging is available for the logs generated by
      the Tomcat internal loggers, as Tomcat uses a package renamed commons
      logging implementation which is hardcoded to use java.util.logging. Use of
      alternative logging frameworks requires building or downloading the
      <a href="extras.html">extras</a> components which include a full
      commons-logging implementation. Instructions for configuring the extras
      components to enable log4j to be used for Tomcat's internal logging may be
      found below.
    </p>

    <p>
      Tomcat no longer uses <code>localhost_log</code> as the runtime
      exception/stack trace log. These types of error are usually thrown by
      uncaught exceptions, but are still valuable to the developer. They can now
      be found in the <code>stdout</code> log.
    </p>

  </section>

  <section name="java.util.logging">

  <p>
    The default implementation of java.util.logging provided in the JDK is too
    limited to be useful. A limitation of JDK Logging appears to be the
    inability to have per-web application logging,  as the configuration is
    per-VM. As a result, Tomcat will, in the default configuration, replace the
    default LogManager implementation with a container friendly implementation
    called JULI, which addresses these shortcomings. It supports the same
    configuration mechanisms as the standard JDK java.util.logging, using either
    a programmatic approach, or properties files. The main difference is that
    per-classloader properties files can be set (which enables easy redeployment
    friendly webapp configuration), and the properties files support slightly
    extended constructs which allows more freedom for defining handlers and
    assigning them to loggers.
  </p>
  <p>
    JULI is enabled by default, and supports per classloader configuration, in
    addition to the regular global java.util.logging configuration. This means
    that logging can be configured at the following layers:
    <ul>
      <li>In the JDK's logging.properties file. Check your JAVA_HOME environment
      setting to see which JDK Tomcat is using. The file will be in 
      <code>$JAVA_HOME/jre/lib</code>.
      Alternately, it can also use a global configuration file located elsewhere
      by using the system property <code>java.util.logging.config.file</code>,
      or programmatic configuration using
      <code>java.util.logging.config.class</code>.</li>
      <li>In each classloader using a logging.properties file. This means that
      it is possible to have a configuration for the Tomcat core, as well as
      separate configurations for each webapps which will  have the same
      lifecycle as the webapps.</li>
    </ul>
  </p>
  <p>
    The default logging.properties specifies a ConsoleHandler for routing
    logging to stdout and also a FileHandler. A handler's log level threshold
    can be set using SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST or ALL.
    The logging.properties shipped with JDK is set to INFO. You can also target
    specific packages to collect logging from and specify a level. Here is how
    you would set debugging from Tomcat. You would need to ensure the
    ConsoleHandler's level is also set to collect this threshold, so FINEST or
    ALL should be set. Please refer to Sun's java.util.logging documentation for
    the complete details.
  </p>
  <p>
    <source>org.apache.catalina.level=FINEST</source>
  </p>
  <p>
    The configuration used by JULI is extremely similar, but uses a few
    extensions to allow better flexibility in assigning loggers. The main
    differences are:
    <ul>
      <li>A prefix may be added to handler names, so that multiple handlers of a
      single class may be instantiated. A prefix is a String which starts with a
      digit, and ends with '.'. For example, <code>22foobar.</code> is a valid
      prefix.</li>
      <li>As in Java 6.0, loggers can define a list of handlers using the
      <code>loggerName.handlers</code> property.</li>
      <li>By default, loggers will not delegate to their parent if they have
      associated handlers. This may be changed per logger using the
      <code>loggerName.useParentHandlers</code> property, which accepts a
      boolean value.</li>
      <li>The root logger can define its set of handlers using a
      <code>.handlers</code> property.</li>
      <li>Logging is not buffered by default. To configure buffering, use the
      <code>bufferSize</code> property of a handler. A value of <code>0</code>
      uses system default buffering (typically an 8K buffer will be used). A
      value of <code>&lt;0</code> forces a writer flush upon each log write. A
      value <code>&gt;0</code> uses a BufferedOutputStream with the defined
      value but note that the system default buffering will also be
      applied.</li>
      <li>System property replacement is performed for property values which
      contain ${systemPropertyName}.</li>
    </ul>
  </p>
  <p>
    Example logging.properties file to be placed in $CATALINA_BASE/conf:
    <source>
handlers = 1catalina.org.apache.juli.FileHandler, \
           2localhost.org.apache.juli.FileHandler, \
           3manager.org.apache.juli.FileHandler, \
           4admin.org.apache.juli.FileHandler, \
           java.util.logging.ConsoleHandler

.handlers = 1catalina.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

1catalina.org.apache.juli.FileHandler.level = FINE
1catalina.org.apache.juli.FileHandler.directory = ${catalina.base}/logs
1catalina.org.apache.juli.FileHandler.prefix = catalina.

2localhost.org.apache.juli.FileHandler.level = FINE
2localhost.org.apache.juli.FileHandler.directory = ${catalina.base}/logs
2localhost.org.apache.juli.FileHandler.prefix = localhost.

3manager.org.apache.juli.FileHandler.level = FINE
3manager.org.apache.juli.FileHandler.directory = ${catalina.base}/logs
3manager.org.apache.juli.FileHandler.prefix = manager.

4admin.org.apache.juli.FileHandler.level = FINE
4admin.org.apache.juli.FileHandler.directory = ${catalina.base}/logs
4admin.org.apache.juli.FileHandler.prefix = admin.
4admin.org.apache.juli.FileHandler.bufferSize = 16384

java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter


############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO
org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = \
   2localhost.org.apache.juli.FileHandler

org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].level = INFO
org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].handlers = \
   3manager.org.apache.juli.FileHandler

org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/admin].level = INFO
org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/admin].handlers = \
   4admin.org.apache.juli.FileHandler

# For example, set the org.apache.catalina.util.LifecycleBase logger to log
# each component that extends LifecycleBase changing state:
#org.apache.catalina.util.LifecycleBase.level = FINE
    </source>
    </p>
    
    <p>
      Example logging.properties for the servlet-examples web application to be
      placed in WEB-INF/classes inside the web application:
      <source>
handlers = org.apache.juli.FileHandler, java.util.logging.ConsoleHandler

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

org.apache.juli.FileHandler.level = FINE
org.apache.juli.FileHandler.directory = ${catalina.base}/logs
org.apache.juli.FileHandler.prefix = servlet-examples.

java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
      </source>
    </p>

  </section>

  <section name="log4j">
    <p>
      This section explains how to configure Tomcat to use log4j rather than
      java.util.logging for all Tomcat's internal logging. The following steps
      describe configuring log4j to output Tomcat's internal logging to a file
      named tomcat.log.
    </p>

    <p>
      <ol>
        <li>Create a file called log4j.properties with the following content 
            and save it into $CATALINA_HOME/lib.
          <source>
log4j.rootLogger=INFO, R <br />
log4j.appender.R=org.apache.log4j.RollingFileAppender <br />
log4j.appender.R.File=${catalina.base}/logs/tomcat.log <br />
log4j.appender.R.MaxFileSize=10MB <br />
log4j.appender.R.MaxBackupIndex=10 <br />
log4j.appender.R.layout=org.apache.log4j.PatternLayout <br />
log4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n
          </source>
        </li>

        <li><a href="http://logging.apache.org/log4j">Download Log4J</a> 
            (v1.2 or later) and place the log4j jar in $CATALINA_HOME/lib.</li>

        <li>Build or download the additional logging components. See the
            <a href="extras.html">extras components</a> documentation for
            details.</li>
        
        <li>Replace <code>$CATALINA_HOME/bin/tomcat-juli.jar</code> with
            <code>output/extras/tomcat-juli.jar</code>.</li>

        <li>Place <code>output/extras/tomcat-juli-adapters.jar</code> in 
            $CATALINA_HOME/lib.</li>

        <li>Delete <code>$CATALINA_BASE/conf/logging.properties</code> to
            prevent java.util.logging generating zero length log files.</li>
        <li>Start Tomcat</li>
      </ol>
    </p>

    <p>
      This log4j configuration sets up a file called tomcat.log in your 
      Tomcat logs folder with a maximum file size of 10MB and
      up to 10 backups.  INFO level is specified which will result in a similar
      level of detail to the standard java.util.logging confgiuration. Use DEBUG
      level logging for the most verbose output from Tomcat.
    </p>
        
    <p>
      You can (and should) be more picky about which packages to include 
      in the logging. Tomcat defines loggers by Engine and Host names.
      For example, for a more detailed Catalina localhost log, add this to the
      end of the log4j.properties above. Note that there are known issues with 
      using this naming convention (with square brackets) in log4j XML based
      configuration files, so we recommend you use a properties file as
      described until a future version of log4j allows this convention.
      
      <source>
log4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost]=DEBUG<br />
log4j.logger.org.apache.catalina.core=DEBUG<br />
log4j.logger.org.apache.catalina.session=DEBUG<br />
      </source>

      Be warned a level of DEBUG will produce megabytes of logging and slow
      startup of Tomcat. This level should be used sparingly when debugging of
      internal Tomcat operations is required.
    </p>
        
    <p>
      Your web applications should certainly use their own log4j configuration. 
      This is valid <i>with</i> the above configuration.  You would place a
      similar log4j.properties file in your web application's WEB-INF/classes
      directory, and log4jx.y.z.jar into WEB-INF/lib. Then specify your package
      level logging. This is a basic setup of log4j which does *not* require
      Commons-Logging, and you should consult the 
      <a href="http://logging.apache.org/log4j/docs/documentation.html">log4j
      documentation</a> for more options. This page is intended only as a
      bootstrapping guide.
    </p>

    <p>
      If you have multiple instances of Tomcat, each with a separate
      <code>$CATALINA_BASE</code> but a shared <code>$CATALINA_HOME</code> then
      you can configure log4j on a per instance basis by replacing references to
      <code>$CATALINA_HOME</code> in the above instructions with
      <code>$CATALINA_BASE</code>. Note that if you do this then you may need to
      make some, or all, of the following additional changes:
      <ul>
        <li>create a <code>$CATALINA_BASE/bin</code> directory</li>
        <li>create a <code>$CATALINA_BASE/lib</code> directory</li>
        <li>if running with a security manager, adjust the codebase for JULI in
            <code>$CATALINA_BASE/conf/catalina.policy</code></li>
      </ul>
    </p>
  </section>

</body>
</document>
